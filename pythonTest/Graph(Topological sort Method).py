# -*- coding: utf-8 -*-
"""Graph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17s0FXuA39UdrwNmFAY7FwVusLMMpm5kc
"""

class Node:
  def __init__(self, data):
    self.data = data
    self.neighbors = []
    self.visited = False
    
  def add_neighbor(self, neighbor):
    self.neighbors.append(neighbor)

  def set_visited(self, visited):
    self.visited = visited

  def get_data(self):
    return self.data

  def get_neighbors(self):
    return self.neighbors

  def get_visited(self):
    return self.visited


class Graph:
  def __init__(self):
    self.nodes = []

  def add_node(self, node):
    self.nodes.append(node)
  
  
  def topological_sort(self):
      stack = []
      for node in self.nodes:
          if node.get_visited(): # visited 가 true 일때
              pass
          else:
              
              self.print_topol(node,stack) # False 일때 실행
      for i in range(len(stack)):
          print(stack.pop())
              
        
  def print_topol(self,node,stack):
      if not node.get_visited():
          node.set_visited(True)
      
          for i in node.get_neighbors(): # 주변이 있으면 실행
              self.print_topol(i,stack)
          
          stack.append(node.get_data()) # 주변이 없으면 puch
      

          
      
  








##  def print_topol(self,node):
##    stack = []
##    node.set_visited(True)
##    a = node.get_neighbors()
##    for neighbor in node.get_neighbors():
##        neighbor.set_visited(True)
##        b_n = neighbor.get_neighbors() # b_n은 리스트
##        for i in b_n:
##            if len(i.get_neighbors()) == 0:
##            
##                stack.append(i.get_data())
##                self.print_topol(neighbor)
##        
##            else:
##                for b in neighbor.get_neighbors():
##                    if b.get_visited() == True:
##                        stack.append(neighbor)
##                        self.print_topol(node)
####                if neighbor.get_neighbors() == :
####                    stack.append(neighbor)
####                    self.print_topol(node)
##            #self.print_topol(neighbor)
##    print(stack)
##        
        
        
##    for neighbor in self.nodes[0].get_neighbors():
##        self.print_topol(neighbor)

    

           
       
       
     
     
graph = Graph()

node_A = Node('A')
graph.add_node(node_A)
node_B = Node('B')
graph.add_node(node_B)
node_C = Node('C')
graph.add_node(node_C)
node_D = Node('D')
graph.add_node(node_D)
node_E = Node('E')
graph.add_node(node_E)
node_F = Node('F')
graph.add_node(node_F)
node_G = Node('G')
graph.add_node(node_G)
node_H = Node('H')
graph.add_node(node_H)
node_I = Node('I')
graph.add_node(node_I)
node_J = Node('J')
graph.add_node(node_J)

node_A.add_neighbor(node_B)
node_A.add_neighbor(node_F)

node_B.add_neighbor(node_H)

node_D.add_neighbor(node_C)
node_D.add_neighbor(node_E)
node_D.add_neighbor(node_I)

node_E.add_neighbor(node_I)

node_G.add_neighbor(node_A)
node_G.add_neighbor(node_B)
node_G.add_neighbor(node_C)

node_I.add_neighbor(node_C)

node_J.add_neighbor(node_E)

graph.topological_sort()